/*
Just Pure CSS Code:
Working with Selectors - Page: 238
==================================

Selector {
    Declaration ==> property: value;
    property: value;
    property: value;
    property: value;
}

Very Important Note:
Please make sure to end each line with ;
we can omit/skip the ; only with these two cases:
- if we have only one declaration (one rule)
- if this is the last line/declaration/rule

That's why it's a good idea to add ; always
*/

/******** Universal Selector: all the HTML elements *********/
/*
Universal Selector:
Apply the styles to all the elements in the document (webpage) without any exception. The symbol is: * which means all the HTML elements inside the page
*/

* {
/*
    Major Font Types:
    Two major and main types that are frequently used in web development:
    - Serif Fonts
    - Sans-serif Fonts

    VSC will give us many font options like (Adobe Dreamweaver) because if one font is not available,
    the browser will jump to the next one and so on We will have more topics about font later

    You can read more about Fonts: https://www.w3schools.com/css/css_font.asp

    Task: target/style the font family (face)
    Task below: style the font family (face) with any sans-serif font family
    */
            font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;

            /*
            Task: target/style the font size to be 16px => px stands for pixel

            We will discus the units of type size in details
            (lesson 12) Page: 275 and Page: 276
            */
            font-size: 16px;
        }

/****** Type Selector: HTML elements *********************

Type Selector ==> matches element names
Just the HTML element names
examples: h1, h2, p, ul, li, div, etc...
*/

/*
Task: The body element, style the body text content to have a dark green color
which means all the normal text (HTML p, li, headings elements, etc.) inside the body
Based on the word cascading for CSS
all the elements inside the body element will have the color to be darkgreen
in other words most of the styles that we apply to the parent element will affect is children elements
*/

    body {
            color: darkgreen;
            /* all the text contents/elements like: p, headings, li (except links) will be darkgreen */
            /*
    Notice that this will not change the color of links to be darkgreen
    because links are always blue and underlined by default in any browser, but we can change them
    */
        }

        /*
Task:
style all the h1, h2, and h3 by changing their font family to be:
serif fonts of "Times New Roman" group.
Hint: use font-family property

Although we don't have heading <h3> in our HTML file,
but we can style it for the future in case if we need to add h3
*/

        h1,
        h2,
        h3 {
            font-family: 'Times New Roman', Times, serif;
        }

/*
NOTE
Avoid using 2 or more same rules!!!!
if selectors have the same properties and value, just combine them all
*/
h1 {
    font-family: 'Times New Roman', Times, serif;
}

h2 {
    font-family: 'Times New Roman', Times, serif;
}

h3 {
    font-family: 'Times New Roman', Times, serif;
}

hr {
    /* 1. change the border color to be brown */
    border-color: brown;
    /*
    NOTE:
    if we just type the property "color"
    we will not see any changes because color property will only
    affect the text:
    color: blue; ==> useless for <hr> element because <hr> element CANNOT
    contain text inside!

    color: blue; ==> for <p>, <h1>, <ul>, <body>
    */

    /* 2. change the border width (thickness) */
    border-width: 3px;

    /*
    3. change the border style:
        - dashed
        - dotted
        - double
        - groove
        - inset
        - outset
        - ridge
        - solid
        - none
    */
    border-style: dashed;

    /*
    instead of typing 3 lines of css:
    border-color: red;
    border-width: 3px;
    border-style: dashed;

    we can just use the shortcut/shorthand way:
    border: width color style;
    border: 3px red dashed;
    in css, we can use this shorthand property named "border":
    */
    border: 3px brown dashed;
}

       /* Task: target/style all ul element(s) to have a "beige" background color: */
       ul {
        /* the entire <ul> block will have the beige background color */
        background-color: beige;
    }

     /* Task: Target all p element(s) to have the font "tahoma" and only "tahoma" */
        p {
            /*
    although all the element will have font-family: 'Lucida Sans'
    based on our * selector
    but using p element will override the * styles

    In CSS, we have "specificity" rule ==> Page: 239
    */
            font-family: Tahoma;
        }

        /*
        Please refer to my pdf in-class notes for more information about "Specificity"

        Starting with the More Specific (Selectors with Hight points)
        Moving towards the Less Specific (Selectors with Less points)

        Type	                                    Points
        =====                                       ======
        !important	                                10000
        Inline Style (Style Attribute)	            1000
        ID	                                        100
        Class, pseudo-class	                        10
        Every Element (div, p, ul, article, â€¦)	    1
        Universal Selector (*)	                    0

        Stay tuned for using this table below :-)

        And if you like, you can check this nice article of Chris Coyier:
        https://css-tricks.com/specifics-on-css-specificity/
        */

        /* More examples about type selector */

        /*
            Task: style all the hr element(s) => we might have one or more or maybe nothing!
            1- change the "border color" to be: brown
            2- change the "border width" to be: 3px
            3- change the "border style" to be: dashed

            Notice that to let VSC code helps you, the keyword is "border".
            When you type border VSC will give you all the properties related to border
        */



        /* ************ Class Selector ************ */
        /* Class Selector: class has the symbol: . */

        /*
        Task: style any element that has class value of "rule"
        <element class="rule">
        by changing the text inside this element to be "uppercase" ==> Hint: text-transform:

        Remember that the class symbol is: .

        Note:
        we can write the selector to be: *.rule because the symbol * refers to all the elements
        or we can just simply write: .rule
        */
        .rule {
            text-transform: uppercase;
        }

        /*
        Quick test of "Specificity" => Task: make all p elements to be in lower case
        This property will affect all p elements except the p element that has a class of "rule"
        */
        p {
            text-transform: lowercase;
        }

        /*
        Task: Style only the p element(s) that has/have a class attribute value of "note"
        Or:
        all the "note" class that is an attribute of p element only:
        <p class="note">

        by making the "font weight" to be "bold" and the "color" to be "red"

        So our selector will be: p.note (Without Spaces)

        Slice your selector to count the points:
        - p element => 1
        - .note class => 10
        - Total: 1 + 10 => 11
        */

        p.note {
            font-weight: bold;
            color: red;
        }

        /*
        Notice that above selector: p.note has 11 points of specificity?
        When we hover the mouse over the selector, VScode will give us this hint:

        <p class="note">
        Selector Specificity: (0, 1, 1)

        The reason:
        we need to divide our selector into individual pieces/parts:

        our selector: p.note
        - the first part is the p element: p
        - the second part is our class "rule": .note

        Now based on the table of specificity: the p element has 1 point and the class "rule" has 10 points
        so 1 point for p + 10 points for .rule will be 11 points in total!
        */


        /*
        Task:
        style any ul element that has a class value of "note" by changing the "list style" to "square"

        Hints:
        If my selector is: .note ==> this will target any element with class "note ==> <element class="note">
        if my selector is ul.note ==> this will target only ul element(s) with class "note" ==> <ul class="note">
        */
        ul.note {
            /* change the list style type to square */
            list-style-type: square;
        }

        /* ************ ID Selector ************ */
        /* ID Selector: id has the symbol: # */

        /*
        Task: Style (any element) that has an id="introduction"
        <element id="introduction"> ==> the code in HTML
        based on ID rules, we should only have one element with id="introduction"
        by changing the background color
        */
        #introduction {
            /* change background color */
            background-color: lightgreen;
        }

        /*
        Task: style the div element that has id value of "container"
        by applying any background color you like

        Our selector: div#container
        - div => HTML Element => 1
        - #container => ID => 100
        - Total: 100 + 1 = 101
        */
        div#container {
            background-color: burlywood;
        }

        /*
            The above selector: div#container
            div (1 point) + #container (100) == total ==> 101 (Specificity points)
        */

        /*
            The below selector: #container
            has only #container (100) == total ==> 100 (Specificity points)
            so its background color will take effect
        */
        #container {
            background-color: lightskyblue;
        }

        /*
        Task: Style the element that has id value of "top" by using text decoration to have an underline

        Notice that we only have this element: <h1 id="top">Kitchen Garden Calendar</h1>
        */
        #top {
            text-decoration: underline;
        }

        /* ********** Descendant Selector *********** */
        /* parentElement childElement (grandChildElement or etc...) */

        /*
        Task: target/style any <li> element which is inside <ol> [the children <li> of <ol> elements]:
        by changing the font style to "italic"

        Based to what we have learnt in HTML, we have ul and ol and both have li
        targeting the li of ol (not ul)
        */
        ol li {
            font-style: italic;
            color: cadetblue;
        }

        /*
        Note: in the example above, we were targeting the <li> of the <ol> only
        we could have just written ol only as a selector
        and having the same result based on the cascading rules,
        but we wrote ol li just to demonstrate the idea of "Descendant Selector"

        The other solution, we can simply just write the following
        */
        ol {
            font-style: italic;
            /*
            Notice that the following color will not be applied
            because of the specificity
             */
            color: chartreuse;
        }

        /*
        Task:
        style <ul> element(s) which is inside <header>
        or style the ul element(s) which is the descendant of the header element
        by changing the "list style type" to a "circle"
        */
        header ul {
            list-style-type: circle;
            /* empty circle */
        }

        /*
            Q) How many ul elements in (inside) the header? we have 2 ul elements

            header ==> nav ==> ul (the first one) <== a border of 2px width with green color dashed style
            header ==> div ==> ul (the second one) <== a border of 3px width with blue color dotted style

            Hint (Recap):
            instead of writing 3 properties:
            - border-width:
            - border-color:
            - border-style:
            using the border shorthand property => border: width color style;
        */

        /* 1: style the ul that inside the nav that inside the header */
        header nav ul {
            border: 2px green dashed;
        }

        /* 2: style the ul that inside the div that inside the header */
        header div ul {
            border: 3px blue dotted;
        }

        /*
        Task: style <a> element(s) which is the descendant of <li> element:
        - color to be yellow
        - background color to be dark red
        - remove the blue underline (which is the default style for <a> anchor element)
        Hint: use the "text-decoration" property

        li ==> a (only the a element that is inside li element)
        */

        ul a {
            color: yellow;
            background-color: darkred;
            text-decoration: none;
        }

        /*
        Task: style <a> element(s) which is the descendant of <p> element
        to be "italic"

        Hint: font-style property
        */
        p a {
            font-style: italic;
        }

        /*
        ************ Child Selector **********************
        Child Selector: Matches element(s) that are "direct" child of another
        the symbol is: >
        */

        /*
        Task: target/style <ul> element that is the direct child (first generation) of div#container
        by give it a border of 4px width, red color, and solid line
        */

        div#container>ul {
            border: 5px red solid;
        }

        /*
        Task: Style/target the hr element which is the "direct" child of div#container
        using border short hand with any settings you like
        */

        div#container>hr {
            border: 5px dotted magenta;
        }

        /*
        **************** Adjacent Sibling Selector ******
        Matches an element that is the "next" sibling of another
        the symbol is: +
        */


        /*
        Task: Style any h2 element which is an adjacent "next" sibling of h1 elements:

        in HTML:
        <h1>...........
        No other element in between
        <h2>...........

        In our HTML Code:
        <h1 id="top">Kitchen Garden Calendar</h1>
        NO HTML element in between (just spaces of comments)
        <h2>Main Calendar</h2>

        our main target is "h2" to be last item to add (close to {})
        writing its sibling element with + sign
        */
        h1+h2 {
            /* Adding more spaces between the letters */
            letter-spacing: 5px;
        }

        /*
        Task: Style the p element which is the "adjacent" sibling of h1:
        in our HTML code:
        <h1>Heading 1</h1>
        NO HTML element in between (just spaces or comments)
        <p>Here is a paragraph</p>

        Note:
        remember that this style will not work,
        we need to comment the line <h2>Main Calendar</h2> in our code for testing it
        */
        h1+p {
            /*
            Adding more/less spaces between the words
            Remember by default, Browsers add only one space
            */
            word-spacing: 15px;
        }

        /*
        Task: style h2 which is the "next adjacent sibling" of hr

        in HTML:
        <hr>...........
        No other element in between (spaces are ok)
        <h2>...........
        */
        hr+h2 {
            text-transform: uppercase;
        }

        /*
        Task: style ul which is the "next adjacent sibling" of h2

        in HTML:
        <h2>...........
        No other element in between (spaces are ok)
        <ul>...........
        */
        h2+ul {
            /*
            Notice that the following rule/style: font-family will NOT take affect
            Because of the number of points for the selectors (Specificity)
            */
            /* font-family: 'Times New Roman', Times, serif; */
            font-weight: bolder;
            color: blueviolet;
        }

        /* **************** General (Any) Sibling Selector ***************
            Matches an element that is a "sibling" of another
            The symbol: ~
        */

        /*
        Task:
        Target/style all the p sibling(s) that come after h1 (not only the first one).
        Also it could be some element(s) in between, still working
        So the condition here that all p elements
        that are written after any h1 elements and inside the same container (parent)
        because they are sibling of course.

        in HTML:
        <h1>...........
        It could have any element in between or nothing just spaces (it works in both ways)
        <p>...........
        */
        h1~p {
            word-spacing: 10px;
        }

        /*
        style the h2 element which is/are sibling(s) to hr
        so all h2 elements that come after hr

        in HTML:
        <hr>...........
        It could have any element in between or nothing just spaces (it works in both ways)
        <h2>...........
        */
        hr~h2 {
            border: 1px orange dotted;
        }
